// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* paquete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  paquete_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2eproto() {
  protobuf_AddDesc_protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol.proto");
  GOOGLE_CHECK(file != NULL);
  paquete_descriptor_ = file->message_type(0);
  static const int paquete_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paquete, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paquete, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paquete, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paquete, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paquete, img_),
  };
  paquete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      paquete_descriptor_,
      paquete::default_instance_,
      paquete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paquete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paquete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(paquete));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    paquete_descriptor_, &paquete::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2eproto() {
  delete paquete::default_instance_;
  delete paquete_reflection_;
}

void protobuf_AddDesc_protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016protocol.proto\"i\n\007paquete\022\020\n\010protocol\030"
    "\001 \002(\t\022\030\n\020protocol_version\030\002 \002(\t\022\022\n\ndevic"
    "eName\030\003 \002(\t\022\021\n\ttimestamp\030\004 \002(\004\022\013\n\003img\030\005 "
    "\002(\014", 123);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  paquete::default_instance_ = new paquete();
  paquete::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int paquete::kProtocolFieldNumber;
const int paquete::kProtocolVersionFieldNumber;
const int paquete::kDeviceNameFieldNumber;
const int paquete::kTimestampFieldNumber;
const int paquete::kImgFieldNumber;
#endif  // !_MSC_VER

paquete::paquete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void paquete::InitAsDefaultInstance() {
}

paquete::paquete(const paquete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void paquete::SharedCtor() {
  _cached_size_ = 0;
  protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  img_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

paquete::~paquete() {
  SharedDtor();
}

void paquete::SharedDtor() {
  if (protocol_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_;
  }
  if (protocol_version_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_version_;
  }
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (img_ != &::google::protobuf::internal::kEmptyString) {
    delete img_;
  }
  if (this != default_instance_) {
  }
}

void paquete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* paquete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return paquete_descriptor_;
}

const paquete& paquete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();  return *default_instance_;
}

paquete* paquete::default_instance_ = NULL;

paquete* paquete::New() const {
  return new paquete;
}

void paquete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_protocol()) {
      if (protocol_ != &::google::protobuf::internal::kEmptyString) {
        protocol_->clear();
      }
    }
    if (has_protocol_version()) {
      if (protocol_version_ != &::google::protobuf::internal::kEmptyString) {
        protocol_version_->clear();
      }
    }
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_img()) {
      if (img_ != &::google::protobuf::internal::kEmptyString) {
        img_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool paquete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string protocol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_protocol_version;
        break;
      }
      
      // required string protocol_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol_version().data(), this->protocol_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceName;
        break;
      }
      
      // required string deviceName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }
      
      // required uint64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_img;
        break;
      }
      
      // required bytes img = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_img()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void paquete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string protocol = 1;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->protocol(), output);
  }
  
  // required string protocol_version = 2;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->protocol_version(), output);
  }
  
  // required string deviceName = 3;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->devicename(), output);
  }
  
  // required uint64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }
  
  // required bytes img = 5;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->img(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* paquete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string protocol = 1;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocol(), target);
  }
  
  // required string protocol_version = 2;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protocol_version(), target);
  }
  
  // required string deviceName = 3;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devicename(), target);
  }
  
  // required uint64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }
  
  // required bytes img = 5;
  if (has_img()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->img(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int paquete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string protocol = 1;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }
    
    // required string protocol_version = 2;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol_version());
    }
    
    // required string deviceName = 3;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }
    
    // required uint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // required bytes img = 5;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->img());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void paquete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const paquete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const paquete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void paquete::MergeFrom(const paquete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_img()) {
      set_img(from.img());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void paquete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void paquete::CopyFrom(const paquete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool paquete::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void paquete::Swap(paquete* other) {
  if (other != this) {
    std::swap(protocol_, other->protocol_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(devicename_, other->devicename_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(img_, other->img_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata paquete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = paquete_descriptor_;
  metadata.reflection = paquete_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
